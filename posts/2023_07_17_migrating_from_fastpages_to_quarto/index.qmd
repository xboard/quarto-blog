---
title: "Migrating my blog from `fastpages` to `Quarto`"
description-meta: "Migrating my blog from `fastpages` to Quarto"
date: 2023-07-17
toc: true
categories: [meta, quarto]
format: html
image: "https://source.unsplash.com/npxXWgQ33ZQ"
---

## Why migrate?

In a [post published on September 3, 2022](https://forums.fast.ai/t/fastpages-deprecating-fastpages-in-favor-of-quarto/99095){target=_blank}, [Hamel Husain](https://hamel.dev/){target=_blank} announced that he has rebuilt [nbdev](https://nbdev.fast.ai/){target=_blank} on top of [Quarto](https://quarto.org){target=_blank}. In the blog post, he explained that there have been new pieces of technology like [Jupyter Book](https://jupyterbook.org/){target=_blank} and [Quarto](https://quarto.org){target=_blank}, which are both fabulous. Husain explained that he ended up using Quarto for nbdev, because of its shared vision with nbdev and the fantastic ongoing support from [JJ Allaire](https://www.rstudio.com/authors/j.j.-allaire/){target=_blank} and the rest of the [Posit](https://posit.co/){target=_blank} team. He also recommended that people trying to blog with notebooks should be using Quarto, instead of [Fastpages](https://github.com/fastai/fastpages){target=_blank}. 

## What is Quarto?

[Quarto](https://quarto.org){target=_blank} is an open-source, web-based platform designed to simplify the creation and publication of scientific documents, including data-driven reports, technical articles, and more, with features such as:

- Compatibility with a wide range of programming languages, including R, Python, and Julia;
- Integration with popular web publishing platforms such as GitHub pages, Netlify among [others](https://quarto.org/docs/publishing/){target=_blank};
- Support for a broad range of document outputs, including LaTeX, PDF, and HTML;
- Extensive customizability with built-in templates and reusable components; and
- Built-in support for code snippets and data visualizations.



## Installing Quarto

Go to the [get started](https://quarto.org/docs/get-started/) page on the quarto website to download the installer file. I‚Äôm on Ubuntu, so for me that‚Äôs a .deb file. I install it from the command line:

```bash
sudo dpkg -i quarto-1.3.433-linux-amd64.deb

```

Create my blog project, called `quarto-blog`:

```bash
quarto create-project quarto-blog --type website:blog

```
then enter the project and preview it:

```bash
cd quarto-blog/
quarto preview quarto-blog
```


![Generated quarto blog preview](images/default-quarto-screen.png)

## Migrating fastpages's posts to Quarto

Follow instructions in nbdev's [Migrating from Fastpages](https://nbdev.fast.ai/tutorials/blogging.html#migrating-from-fastpages){target=_blank} tutorial.

In my case:

```bash
cd quarto-blog
cp -r ../fastpages-blog/_notebooks/* posts
cp -r ../fastpages-blog/_posts/* posts
cp ../fastpages-blog/images/* posts
cp -r ../fastpages-blog/images/copied_from_nb/* posts
nbdev_migrate --path posts
```


## Setup general blog configuration
Rename blog title, description and add `favicon`

Edited section website in file `_quarto.yml` updating title and description and then adding site-url, favicon and google analytics configuration:

```{.yaml filename='_quarto.yml'}
website:
  title: "xboard.dev"
  favicon: favicon.ico
  site-url: https://xboard.dev
  description: "Everything data and programming."
  google-analytics: "G-5FL5R0TTQ6"
```

### Setup navigation menu and footer

Maintained About page and added github, twitter and rss buttons in
the right section of the navigation bar and centered content license in the footer.

```{.yaml filename='_quarto.yml'}
website:
  navbar:
    right:
      - about.qmd
      - icon: github
        href: https://github.com/xboard
      - icon: twitter
        href: https://twitter.com/xboard_
      - icon: rss
        href: index.xml
  page-footer:
    center: |
      Made with Data, ‚ù§Ô∏è, üêç and [Quarto](https://quarto.org). License: [CC BY-SA 2.0](https://creativecommons.org/licenses/by-sa/2.0/).

```


### Setup social metadata

To enables richer sharing of links to articles on the web improving the previews of my content when a link to it is pasted into applications like Twitter, Slack, Discord, Facebook, Linkedin, and more.

```{.yaml filename='_quarto.yml'}
website:
  twitter-card:
    creator: "@xboard_"
    card-style: summary_large_image
  open-graph: true

```

## Setup themes for light and dark mode 

After playing a bit with some of the default themes available I have chosen litera and superhero for light and dark modes respectively.

```{.yaml filename='_quarto.yml'}
theme:
  light: litera
  dark: superhero
css: styles.css
```

![Light mode with litera theme](images/themed-screen-part1.png)

![Dark mode with superhero theme](images/themed-screen-dark_mode.png)


## Adding `canonical` tag into the `<head>` section

I have followed [this post](https://github.com/quarto-dev/quarto-cli/discussions/3976#discussioncomment-6376014){target=_blank} from [Matt Bowers](https://github.com/mcb00){target=_blank} adding the following python script:

```{.py filename='add-canonicals.py'}
"""
This script adds canonical url tags to pages in a Quarto website.
Place the script in the root of the project and run it post render.

author: Matt Bowers - https://github.com/mcb00
from https://github.com/quarto-dev/quarto-cli/discussions/3976#discussioncomment-6376014
"""

from xml.dom.minidom import parse
from urllib.parse import urlparse
import warnings

site_dir = '_site'
sitemap_file = 'sitemap.xml'

document = parse(site_dir + '/' + sitemap_file)
locs = document.getElementsByTagName('loc')
urls = [l.firstChild.nodeValue for l in locs]

for url in urls:
    
    path = site_dir + urlparse(url).path
    canonical_tag = f'<link rel="canonical" href="{url}" />'

    # Read in the file
    with open(path, 'r') as file :
      filedata = file.read()

    if filedata.__contains__('<link rel="canonical"'):
        warnings.warn(f'{path} already contains canonical tag. Skipping this file.')
    else:
        print(f'{path} adding canonical tag.')
        # Replace the target string
        filedata = filedata.replace('</head>', canonical_tag +'\n</head>')

        # Write the file out again
        with open(path, 'w') as file:
          file.write(filedata)
```

and them add a `post-render` configuration pointing to this script in my project:

```{.yml filename='_quarto.yml'}
project:
  post-render:
    - "python add-canonicals.py"
```

## Git/Github

### Create `.gitignore` file

Created `.gitignore` file with the following content:

```{.txt filename='.gitignore'} 
/.quarto/
/_site/
/_freeze/s
```

### Initialize Git and upload to repository in Github

Initialize local repository:

```bash
git init
git add .
git commit -m "Migrated blog: first commit"
```

Then go to [Github](https://github.com/){target=_blank} and create a new public repository named `quarto-blog`
and in your local repository directory type in the terminal:

```bash
git remote add origin https://github.com/xboard/quarto-blog.git
git push -u -f origin master
```


### Setup github pages

I have followed this [article](hhttps://quarto.org/docs/publishing/github-pages.html#publish-command){target=_blank} from the official quarto documentation on how to publish you content to a gh-pages branch.

:::{.column-margin}
My old blog was running in github-pages and I want to keep using it. 
:::

### Add custom domain to github pages

First remove the domain in repository [fastpages-blog](https://github.com/xboard/fastpages-blog){target=_blank}

![Remove domain from old blog repository](images/remove_domain_from_old_repo.png)

then add domain to [quarto-blog repository](https://github.com/xboard/quarto-blog){target=_blank} github page.



## Creating Conda's environment

Quarto supports executable Python code blocks within markdown. This allows you to create fully reproducible documents and reports‚Äîthe Python code required to produce your output is part of the document itself, and is automatically re-run whenever the document is rendered. 

Therefore it is crucial to have a reproducible Python execution environment and for such I have chosen [Miniconda](https://docs.conda.io/en/latest/miniconda.html){target=_blank}.
This are the steps I did to create my virtual environment and to save its configuration in github.

1. Create and activate the environment
```bash
conda create -n 'quarto_env'
conda activate quarto_env
```

2. Install data-science libraries
```bash
conda install pandas seaborn matplotlib plotly pip scrapy statsmodels jupyter jupyterlab xgboost scikit-learn seaborn lightgbm "pymc>=5" jax[cpu] tsfresh sktime prophet gradio plotly  scipy statsmodels arviz xarray pytorch fastai  streamlit lime shap interpret yellowbrick pypdf langchain accelerate bitsandbytes transformers scrapy  
```

3. Export all libraries installed in environment to `environment.yml` file
```bash
conda env export --name quarto_env --file environment.yml
```

4. Add and push to github
```bash
git add environment.yml
git commit -m 'Add conda environment.yml'
```

You can see the generated `environment.yml` file in github [here](https://github.com/xboard/quarto-blog/blob/main/environment.yml){target=_blank}.


## Default configuration for blog posts

This setup properties that will be inherited by all posts.

```{.yaml filename='posts/_metadata.yml'}

# options specified here will apply to all posts in this folder

# freeze computational output
# (see https://quarto.org/docs/projects/code-execution.html#freeze)
freeze: true                                           # <1>

# Enable banner style title blocks
title-block-banner: true                               # <2>

# Default for table of contents
toc: true
toc-title: Contents                                    # <3>
toc-location: left
toc-expand: 2

# Default author
author:
  - name: Flavio Regis de Arruda
    url: https://xboard.dev

# Default fields for citation
citation: false                                        # <4>
```

1. computational documents should never be re-rendered during a global project render
2. create a banner style [title block](https://quarto.org/docs/authoring/title-blocks.html#title-banners){target=_blank}
3. table of content title
4. do not show [citation metadata](https://quarto.org/docs/reference/metadata/citation.html){target=_blank}.




## Enabling commenting

I have chosen [Giscus app](https://quarto.org/docs/reference/projects/websites.html#giscus){target=_blank} to leverage [Github Discussions](https://docs.github.com/en/discussions){target=_blank} as commenting platform in my posts. 

```{.yaml filename="_quarto.yml"}
website:
  comments:
    giscus:
      repo: xboard/quarto-blog                     # <1>
      repo-id: R_kgDOJ7r2SQ                        # <2>
      category: Announcements                      # <3>
      category-id: DIC_kwDOJ7r2Sc4CX95f            # <4>
      loading: lazy
```

1. the Github repo that will be used to store comments.
2. found using [https://giscus.app/](https://giscus.app/){target=_blank} 
3. discussion category in Github Discussions
4. found using [https://giscus.app/](https://giscus.app/){target=_blank} 

after this at the bottom of every post you will see the Giscus integration in action:

![Giscus widget for commenting and reactions](images/post_comments.png)


## Setup footer

Footer message to be displayed (centered) in all my pages:

```{.yaml filename="_quarto.yml"}
website:
  page-footer:
    center: |
      Made with Data, ‚ù§Ô∏è, üêç and [Quarto](https://quarto.org). License: [CC BY-SA 2.0](https://creativecommons.org/licenses/by-sa/2.0/).
```

## VSCode

I love to use [Visual Studio Code](https://code.visualstudio.com/){target=_blank}
to write my blogs posts and I was very pleased to discover it has an excellent [Quarto extension](https://quarto.org/docs/tools/vscode.html){target=_blank}.


### Installing VS Code Quarto extension

To install the [Quarto extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto){target=_blank} type (Ctrl+P), type:

```txt
ext install quarto.quarto
```

and press enter.

Some of the features this extensions includes:

- Integrated render and preview for Quarto documents.
- Syntax highlighting for markdown and embedded languages
- Completion and diagnostics for YAML options
- Completion for embedded languages (e.g. Python, R, Julia, etc.)
- Commands and key-bindings for running cells and selected lines.
- Live preview for LaTeX math as well as Mermaid and Graphviz diagrams

### Adding snippet

### Enabling inline suggestion
Set `Snippet suggestions` to `inline` as recommended [here](https://stackoverflow.com/a/74339599/483157){target=_blank}.


### Adding spell checker

Installed [Code Spell checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker){target=_blank}.

and them after clicking the spell button at the button at the editor bottom right I enabled its support to Quarto on my workspace.

![Enabling Quarto for Code Spell Checker](images/code_spell_checker_quarto.png)


## Conclusion

In summary, Quarto provides me with a powerful and versatile platform to write my technical blog posts as a Data Scientist and Python programmer. Its integration with Jupyter notebooks, support for multiple programming languages, customization options, collaboration features, and rendering capabilities make it the ideal choice for me to create high-quality, detailed, and engaging technical articles. With Quarto, I can focus on delivering content while enjoying a seamless and efficient writing experience.

In this post I have described in details all the steps that I did to migrated my posts from fastpages and how I configured Quarto to support the blog you are reading now.

If you were also using fastpages and intend to migrate, I hope it not only helps you in your decision process but also speeds up the setup of your new Quarto blog.