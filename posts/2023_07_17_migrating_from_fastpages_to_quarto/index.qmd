---
title: "Migrating my blog from `fastpages` to `Quarto`"
description-meta: "Migrating my blog from `fastpages` to Quarto"
date: 2023-07-17
toc: true
categories: [meta, quarto]
format: html
draft: true
image: "https://source.unsplash.com/npxXWgQ33ZQ"
---

## Why

In a [post published on September 3, 2022](https://forums.fast.ai/t/fastpages-deprecating-fastpages-in-favor-of-quarto/99095){target=_blank}, [Hamel Husain](https://hamel.dev/){target=_blank} announced that he has rebuilt [nbdev](https://nbdev.fast.ai/){target=_blank} on top of [Quarto](https://quarto.org){target=_blank}. In the blog post, he explained that there have been new pieces of technology like [Jupyter Book](https://jupyterbook.org/){target=_blank} and [Quarto](https://quarto.org){target=_blank}, which are both fabulous. Husain explained that he ended up using Quarto for nbdev, because of its shared vision with nbdev and the fantastic ongoing support from [JJ Allaire](https://www.rstudio.com/authors/j.j.-allaire/){target=_blank} and the rest of the [Posit](https://posit.co/){target=_blank} team. He also recommended that people trying to blog with notebooks should be using Quarto, instead of [Fastpages](https://github.com/fastai/fastpages){target=_blank}. 

## What is Quarto?

[Quarto](https://quarto.org){target=_blank} is an open-source, web-based platform designed to simplify the creation and publication of scientific documents, including data-driven reports, technical articles, and more, with features such as:

- Compatibility with a wide range of programming languages, including R, Python, and Julia;
- Integration with popular web publishing platforms such as GitHub pages, Netlify among [others](https://quarto.org/docs/publishing/){target=_blank};
- Support for a broad range of document outputs, including LaTeX, PDF, and HTML;
- Extensive customizability with built-in templates and reusable components; and
- Built-in support for code snippets and data visualizations.

With its comprehensive range of features and user-friendly interface, IMHO Quarto is an ideal choice for Python and Data developers looking for a streamlined and customizable approach to blogging.


## Installing Quarto

Go to the [get started](https://quarto.org/docs/get-started/) page on the quarto website to download the installer file. I‚Äôm on Ubuntu, so for me that‚Äôs a .deb file. I install it from the command line:

```bash
sudo dpkg -i quarto-1.3.433-linux-amd64.deb

```

Create my blog project, called `quarto-blog`:

```bash
quarto create-project quarto-blog --type website:blog

```
then enter the project and preview it:

```bash
cd quarto-blog/
quarto preview quarto-blog
```


![Generated quarto blog preview](images/default-quarto-screen.png)

## Migrating fastpages's posts to Quarto

Follow instructions in nbdev's [Migrating from Fastpages](https://nbdev.fast.ai/tutorials/blogging.html#migrating-from-fastpages){target=_blank} tutorial.

In my case:

```bash
cd quarto-blog
cp -r ../fastpages-blog/_notebooks/* posts
cp -r ../fastpages-blog/_posts/* posts
cp ../fastpages-blog/images/* posts
cp -r ../fastpages-blog/images/copied_from_nb/* posts
nbdev_migrate --path posts
```

### Create `.gitignore` file

Created `.gitignore` file with the following content:

```{.txt filename='.gitignore'} 
/.quarto/
/_site/
/_freeze/
```

## Setup general blog configuration
Rename blog title, description and add `favicon`

Edited section website in file `_quarto.yml` updating title and description and then adding site-url, favicon and google analytics configuration:

```{.yaml filename='_quarto.yml'}
website:
  title: "xboard.dev"
  favicon: favicon.ico
  site-url: https://xboard.dev
  description: "Everything data and programming."
  google-analytics: "G-5FL5R0TTQ6"
```

### Setup navigation menu and footer

Mantained About page and added github, twitter and rss buttons in
the right section of the navigation bar and centered content license in the footer.

```{.yaml filename='_quarto.yml'}
website:
  navbar:
    right:
      - about.qmd
      - icon: github
        href: https://github.com/xboard
      - icon: twitter
        href: https://twitter.com/xboard_
      - icon: rss
        href: index.xml
  page-footer:
    center: |
      Made with Data, ‚ù§Ô∏è, üêç and [Quarto](https://quarto.org). License: [CC BY-SA 2.0](https://creativecommons.org/licenses/by-sa/2.0/).

```


### Setup social metadata

To enables richer sharing of links to articles on the web improving the previews of my content when a link to it is pasted into applications like Twitter, Slack, Discord, Facebook, Linkedin, and more.

```{.yaml filename='_quarto.yml'}
website:
  twitter-card:
    creator: "@xboard_"
    card-style: summary_large_image
  open-graph: true

```

## Setup themes for light and dark mode 

After playing a bit with some of the default themes available I have choosen litera and superhero for light and dark modes respectively.

```{.yaml filename='_quarto.yml'}
theme:
  light: litera
  dark: superhero
css: styles.css
```

![Light mode with litera theme](images/themed-screen-part1.png)

![Dark mode with superhero theme](images/themed-screen-dark_mode.png)


## Adding `canonical` tag into the `<head>` section

I have followed [this post](https://github.com/quarto-dev/quarto-cli/discussions/3976#discussioncomment-6376014){target=_blank} from [Matt Bowers](https://github.com/mcb00){target=_blank} adding the following python script:

```{.py filename='add-canonicals.py'}
"""
This script adds canonical url tags to pages in a Quarto website.
Place the script in the root of the project and run it post render.

author: Matt Bowers - https://github.com/mcb00
from https://github.com/quarto-dev/quarto-cli/discussions/3976#discussioncomment-6376014
"""

from xml.dom.minidom import parse
from urllib.parse import urlparse
import warnings

site_dir = '_site'
sitemap_file = 'sitemap.xml'

document = parse(site_dir + '/' + sitemap_file)
locs = document.getElementsByTagName('loc')
urls = [l.firstChild.nodeValue for l in locs]

for url in urls:
    
    path = site_dir + urlparse(url).path
    cannonical_tag = f'<link rel="canonical" href="{url}" />'

    # Read in the file
    with open(path, 'r') as file :
      filedata = file.read()

    if filedata.__contains__('<link rel="canonical"'):
        warnings.warn(f'{path} already contains canonical tag. Skipping this file.')
    else:
        print(f'{path} adding canonical tag.')
        # Replace the target string
        filedata = filedata.replace('</head>', cannonical_tag +'\n</head>')

        # Write the file out again
        with open(path, 'w') as file:
          file.write(filedata)
```

and them add a `post-render` configuration pointig to this script in my project:

```{.yml filename='_quarto.yml'}
project:
  post-render:
    - "python add-canonicals.py"
```

## Git/Github

### Setup github pages

I have followed this [article](hhttps://quarto.org/docs/publishing/github-pages.html#publish-command) from the official quarto documentation on how to publish you content to a gh-pages branch.

:::{.column-margin}
My old blog was running in github-pages and I want keep using it. One benefit of this decision is not having to update DNS configuration in NameCheap.
:::

### Add custom domain to github pages

First remove the domain in repository [fastpages-blog](https://github.com/xboard/fastpages-blog)

then add domain to [quarto-blog] repository.

## Creating Conda's environment


## Setup `posts/_metadata.yml`

### Setup (giscus)[https://giscus.app/] comments



## Setup footer

## VSCode

### Adding Quarto extesion

### Adding snippet

### Enabling inline suggestion
Set `Snippet suggestions` to `inline` as recommended [here](https://stackoverflow.com/a/74339599/483157).

## Conclusion

If you're a Python developer looking for an efficient, cost-effective, and customizable way to publish your Python development blog, the Quarto project is an excellent choice. With integrated features such as metadata
